searchState.loadedDescShard("strainer", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad configuration from environment variables\nLoad configuration from a TOML file at the specified path\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad configuration from default locations and environment …\nMerge another configuration into this one\nValidate the configuration\nTrait defining the interface for rate limit providers\nRepresents rate limit information from a provider\nCreate a new provider based on the configuration Creates a …\nReturns the argument unchanged.\nGet the current rate limits from the provider Get the …\nCalls <code>U::from(self)</code>.\nProvider implementation for Anthropic’s API\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Anthropic provider with the given …\nMock provider for testing\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new mock provider with initial usage values\nSet the usage values for testing\n<code>RateLimiter</code> manages API rate limits with thresholds for …\nCalculate the usage percentage, with proper handling of …\nCheck if any rate limits are exceeded and get appropriate …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>RateLimiter</code> with the specified configuration\nReturns the argument unchanged.\nGet a list of all API calls made to this mock provider\nCalls <code>U::from(self)</code>.\nSet the response that will be returned by this mock …")