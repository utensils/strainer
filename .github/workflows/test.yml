name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  test:
    strategy:
      fail-fast: false # Continue with other builds even if one fails
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux (x86_64)
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            name: Linux (aarch64)
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            name: Linux (armv7)
            target: armv7-unknown-linux-gnueabihf
          - os: macos-14
            name: macOS (Apple Silicon)
            target: aarch64-apple-darwin
          - os: macos-latest
            name: macOS (Intel x86_64)
            target: x86_64-apple-darwin
    name: Test ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy, rustfmt
          targets: ${{ matrix.target }}
        
      - name: Install cross-compilation tools
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
          # Add OpenSSL dev packages for cross-compilation
          sudo apt-get install -y libssl-dev:arm64 libssl-dev:armhf pkg-config
          # Configure pkg-config for cross-compilation
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig" >> $GITHUB_ENV
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Check formatting
        run: cargo fmt --check
        
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Run tests
        run: |
          if [ -n "${{ matrix.target }}" ] && [ "${{ matrix.target }}" != "${{ runner.os == 'Linux' && 'x86_64-unknown-linux-gnu' || runner.os == 'macOS' && 'x86_64-apple-darwin' }}" ]; then
            cargo test --features testing --target ${{ matrix.target }}
          else
            cargo test --features testing
          fi
        
      - name: Run security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: coverage-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
        
      # Build first to avoid timeouts during coverage
      - name: Build
        run: cargo build --features testing
        
      - name: Generate coverage report
        run: |
          # Run tarpaulin with increased timeout and release mode
          CARGO_INCREMENTAL=0 RUSTFLAGS='-C instrument-coverage' \
          cargo tarpaulin --features testing \
            --timeout 300 \
            --out Xml \
            --output-dir coverage \
            --fail-under 80 \
            -- --test-threads=1
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/cobertura.xml
          fail_ci_if_error: false

  # docs:
  #   name: Documentation
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: stable
  #       
  #     - name: Build documentation
  #       run: cargo doc --no-deps --all-features
  #       env:
  #         RUSTDOCFLAGS: -D warnings
  #         
  #     - name: Deploy documentation
  #       uses: peaceiris/actions-gh-pages@v3
  #       if: github.ref == 'refs/heads/main'
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ./target/doc