# Strainer Development Rules

## Core Principles
- Provider-based architecture for API service abstraction
- Strong rate limiting and process control
- Configuration through TOML and environment variables
- Comprehensive test coverage
- Clean error handling

## Testing Requirements
1. Test Coverage Goals:
   - Minimum 90% overall coverage
   - 100% coverage for rate limiting core
   - 100% coverage for process control
   - Coverage tracked via cargo-tarpaulin

2. Testing Approaches:
   - Unit tests for all public functions
   - Property-based testing with proptest for rate limiting
   - Integration tests for CLI workflows
   - Test fixtures for provider implementations
   - Mock external dependencies where needed

3. Test Organization:
   - Basic tests run with `cargo test`
   - Extended tests with `cargo test --features testing`
   - Provider-specific tests in respective modules
   - Regression tests preserved via proptest

## Code Quality
1. Static Analysis:
   - Clippy in strict mode
   - rustfmt for consistent formatting
   - Documentation requirements for public APIs

2. Error Handling:
   - Custom error types per module
   - No unwrap() in production code
   - Proper error propagation
   - Clear error messages

3. Provider Implementation:
   - Must implement Provider trait
   - Separate rate limit handling
   - Clear configuration parsing
   - Comprehensive API error handling

## CI/CD Pipeline
1. Required Checks:
   - Full test suite
   - Coverage reporting
   - Clippy analysis
   - Format verification
   - Documentation build
   - Security audit

2. PR Requirements:
   - Tests for new features
   - Updated documentation
   - No coverage decrease
   - Clean clippy run
   - Passing integration tests

## Development Workflow
1. Feature Development:
   - Create feature branch
   - Write tests first
   - Implement feature
   - Update documentation
   - Submit PR

2. Provider Addition:
   - Implement Provider trait
   - Add configuration support
   - Write provider tests
   - Add integration tests
   - Document API specifics

3. Configuration Changes:
   - Update TOML schema
   - Add environment variables
   - Update documentation
   - Add migration notes if needed